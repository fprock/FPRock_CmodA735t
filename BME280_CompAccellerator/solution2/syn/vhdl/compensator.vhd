-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compensator is
generic (
    C_S_AXI_COMPENSATOR_IO_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_COMPENSATOR_IO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_compensator_io_AWVALID : IN STD_LOGIC;
    s_axi_compensator_io_AWREADY : OUT STD_LOGIC;
    s_axi_compensator_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_COMPENSATOR_IO_ADDR_WIDTH-1 downto 0);
    s_axi_compensator_io_WVALID : IN STD_LOGIC;
    s_axi_compensator_io_WREADY : OUT STD_LOGIC;
    s_axi_compensator_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_COMPENSATOR_IO_DATA_WIDTH-1 downto 0);
    s_axi_compensator_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_COMPENSATOR_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_compensator_io_ARVALID : IN STD_LOGIC;
    s_axi_compensator_io_ARREADY : OUT STD_LOGIC;
    s_axi_compensator_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_COMPENSATOR_IO_ADDR_WIDTH-1 downto 0);
    s_axi_compensator_io_RVALID : OUT STD_LOGIC;
    s_axi_compensator_io_RREADY : IN STD_LOGIC;
    s_axi_compensator_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_COMPENSATOR_IO_DATA_WIDTH-1 downto 0);
    s_axi_compensator_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_compensator_io_BVALID : OUT STD_LOGIC;
    s_axi_compensator_io_BREADY : IN STD_LOGIC;
    s_axi_compensator_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of compensator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "compensator,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.882000,HLS_SYN_LAT=101,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=66,HLS_SYN_FF=9718,HLS_SYN_LUT=8501,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (101 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (101 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (101 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (101 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (101 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (101 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (101 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (101 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (101 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (101 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (101 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (101 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv64_3F70000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111101110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv64_3F50000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111101010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4059000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001011001000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_67AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110011110101110";
    constant ap_const_lv29_1FFF91B3 : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111001000110110011";
    constant ap_const_lv32_A6A81954 : STD_LOGIC_VECTOR (31 downto 0) := "10100110101010000001100101010100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv24_80 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv22_3E0C00 : STD_LOGIC_VECTOR (21 downto 0) := "1111100000110000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv22_3ED400 : STD_LOGIC_VECTOR (21 downto 0) := "1111101101010000000000";
    constant ap_const_lv48_1540000 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001010101000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_100000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv50_30E2000000000 : STD_LOGIC_VECTOR (49 downto 0) := "11000011100010000000000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv22_200000 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv64_C35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000110000110101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv48_FFFFFD6A7000 : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111101011010100111000000000000";
    constant ap_const_lv63_9043 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000001001000001000011";
    constant ap_const_lv31_19000000 : STD_LOGIC_VECTOR (30 downto 0) := "0011001000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv17_19000 : STD_LOGIC_VECTOR (16 downto 0) := "11001000000000000";
    constant ap_const_lv63_4821800000000000 : STD_LOGIC_VECTOR (62 downto 0) := "100100000100001100000000000000000000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_10BD : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001000010111101";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv64_FFFFFFFFFFFFD80A : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111101100000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv57_26AC0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000100110101011000000";
    constant ap_const_lv26_32 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000110010";
    constant ap_const_lv29_1FFFFFCE : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111001110";
    constant ap_const_lv30_2F704000 : STD_LOGIC_VECTOR (29 downto 0) := "101111011100000100000000000000";
    constant ap_const_lv31_182 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000110000010";
    constant ap_const_lv31_2000 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_const_lv35_BD0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000101111010000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal temp_comp_ap_vld : STD_LOGIC;
    signal pres_comp_ap_vld : STD_LOGIC;
    signal hum_comp_ap_vld : STD_LOGIC;
    signal temp_raw : STD_LOGIC_VECTOR (31 downto 0);
    signal pres_raw : STD_LOGIC_VECTOR (31 downto 0);
    signal hum_raw : STD_LOGIC_VECTOR (31 downto 0);
    signal hum_raw_read_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal pres_raw_read_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_fu_312_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_reg_928 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln25_fu_329_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln25_reg_933 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln26_1_reg_938 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln26_2_reg_943 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln2_reg_948 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln31_fu_406_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln31_reg_953 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln32_fu_428_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln32_reg_961 : STD_LOGIC_VECTOR (25 downto 0);
    signal var1_s32_1_fu_434_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal var1_s32_1_reg_966 : STD_LOGIC_VECTOR (21 downto 0);
    signal var2_s64_fu_446_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal var2_s64_reg_973 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal empty_20_fu_452_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_20_reg_978 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln8_reg_983 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_reg_988 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln42_fu_558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln42_reg_993 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_15_reg_998 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln35_fu_886_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln35_reg_1003 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal var1_s32_2_fu_892_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal var1_s32_2_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_reg_1013 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_reg_1018 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal mul_ln35_2_fu_638_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln35_2_reg_1023 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln53_1_reg_1028 : STD_LOGIC_VECTOR (24 downto 0);
    signal var1_s64_fu_659_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal var1_s64_reg_1033 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln53_2_reg_1038 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln55_fu_729_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln55_reg_1048 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_679_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln36_reg_1053 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_593_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln42_reg_1058 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sext_ln28_fu_761_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1073 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_fu_756_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_fine_reg_1078 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal trunc_ln5_reg_1084 : STD_LOGIC_VECTOR (50 downto 0);
    signal sext_ln43_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_reg_1089 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_fu_778_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln43_reg_1095 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal trunc_ln43_1_reg_1100 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal trunc_ln6_reg_1105 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln7_reg_1110 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal add_ln45_2_fu_847_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal add_ln45_2_reg_1115 : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal sext_ln45_2_fu_853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal tmp_3_reg_1130 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1135 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1140 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_1145 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_1150 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal grp_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_fu_272_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_278_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln25_fu_292_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln1_fu_298_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln26_fu_308_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln25_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal var1_s32_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_fu_336_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln26_1_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_fu_336_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln26_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_1_fu_861_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln26_3_fu_364_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal t_fine_fu_367_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_fu_376_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln27_fu_372_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln28_1_fu_384_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln28_fu_390_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_416_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln31_3_fu_412_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln32_fu_424_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal var2_s64_fu_446_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal var2_s64_fu_446_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln31_fu_440_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_20_fu_452_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_868_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln50_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln50_2_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_1_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln50_2_fu_492_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln50_1_fu_485_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln50_3_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln50_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln41_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_527_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_cast_fu_539_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal add_ln34_fu_542_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln42_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal var2_s64_2_fu_552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_1_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln50_1_fu_564_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal xor_ln50_fu_571_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_877_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_593_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln35_1_fu_622_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln35_1_fu_622_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln35_1_fu_622_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal mul_ln35_2_fu_638_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln53_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln35_2_fu_656_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln53_1_fu_906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_679_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln53_2_fu_685_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal var1_s32_3_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of var1_s32_3_fu_688_p2 : signal is "no";
    signal tmp_16_fu_697_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln53_fu_693_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal var1_s32_4_fu_705_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln55_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_719_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln36_fu_737_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_13_fu_742_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_756_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_778_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_784_p0 : STD_LOGIC_VECTOR (50 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_fu_788_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_784_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_788_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_1_fu_813_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln44_fu_816_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal add_ln45_fu_819_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln45_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln45_1_fu_829_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln45_1_fu_844_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal mul_ln26_1_fu_861_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_868_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_877_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_877_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_877_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln35_fu_886_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal var1_s32_2_fu_892_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln53_fu_899_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln53_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln53_fu_899_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln53_1_fu_906_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_756_ap_start : STD_LOGIC;
    signal grp_fu_756_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (101 downto 0);
    signal grp_fu_756_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_877_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal var1_s32_2_fu_892_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component compensator_fptrubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compensator_dmul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component compensator_ddiv_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component compensator_sitodeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component compensator_sitodfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component compensator_mul_1g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component compensator_mul_1hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (47 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component compensator_sdiv_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component compensator_mul_1jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (50 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component compensator_mul_5kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (50 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component compensator_mul_1lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component compensator_mul_mmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component compensator_mac_mncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component compensator_mac_mocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component compensator_mul_mpcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component compensator_mul_mqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compensator_mul_mrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compensator_mul_msc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compensator_compensator_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        temp_comp : IN STD_LOGIC_VECTOR (31 downto 0);
        temp_comp_ap_vld : IN STD_LOGIC;
        pres_comp : IN STD_LOGIC_VECTOR (31 downto 0);
        pres_comp_ap_vld : IN STD_LOGIC;
        hum_comp : IN STD_LOGIC_VECTOR (31 downto 0);
        hum_comp_ap_vld : IN STD_LOGIC;
        temp_raw : OUT STD_LOGIC_VECTOR (31 downto 0);
        pres_raw : OUT STD_LOGIC_VECTOR (31 downto 0);
        hum_raw : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    compensator_compensator_io_s_axi_U : component compensator_compensator_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_COMPENSATOR_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_COMPENSATOR_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_compensator_io_AWVALID,
        AWREADY => s_axi_compensator_io_AWREADY,
        AWADDR => s_axi_compensator_io_AWADDR,
        WVALID => s_axi_compensator_io_WVALID,
        WREADY => s_axi_compensator_io_WREADY,
        WDATA => s_axi_compensator_io_WDATA,
        WSTRB => s_axi_compensator_io_WSTRB,
        ARVALID => s_axi_compensator_io_ARVALID,
        ARREADY => s_axi_compensator_io_ARREADY,
        ARADDR => s_axi_compensator_io_ARADDR,
        RVALID => s_axi_compensator_io_RVALID,
        RREADY => s_axi_compensator_io_RREADY,
        RDATA => s_axi_compensator_io_RDATA,
        RRESP => s_axi_compensator_io_RRESP,
        BVALID => s_axi_compensator_io_BVALID,
        BREADY => s_axi_compensator_io_BREADY,
        BRESP => s_axi_compensator_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        temp_comp => grp_fu_245_p1,
        temp_comp_ap_vld => temp_comp_ap_vld,
        pres_comp => grp_fu_249_p1,
        pres_comp_ap_vld => pres_comp_ap_vld,
        hum_comp => grp_fu_253_p1,
        hum_comp_ap_vld => hum_comp_ap_vld,
        temp_raw => temp_raw,
        pres_raw => pres_raw,
        hum_raw => hum_raw);

    compensator_fptrubkb_U1 : component compensator_fptrubkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_1_reg_1140,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p1);

    compensator_fptrubkb_U2 : component compensator_fptrubkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_4_reg_1145,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p1);

    compensator_fptrubkb_U3 : component compensator_fptrubkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_7_reg_1150,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p1);

    compensator_dmul_cud_U4 : component compensator_dmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_reg_1130,
        din1 => ap_const_lv64_3F70000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p2);

    compensator_dmul_cud_U5 : component compensator_dmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_6_reg_1135,
        din1 => ap_const_lv64_3F50000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);

    compensator_ddiv_dEe_U6 : component compensator_ddiv_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_1073,
        din1 => ap_const_lv64_4059000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_267_p2);

    compensator_sitodeOg_U7 : component compensator_sitodeOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_272_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_272_p1);

    compensator_sitodfYi_U8 : component compensator_sitodfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_275_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p1);

    compensator_mul_1g8j_U9 : component compensator_mul_1g8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 13,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_593_p0,
        din1 => sub_ln42_reg_993,
        ce => ap_const_logic_1,
        dout => grp_fu_593_p2);

    compensator_mul_1hbi_U10 : component compensator_mul_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 17,
        din1_WIDTH => 48,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_679_p0,
        din1 => var1_s64_reg_1033,
        ce => ap_const_logic_1,
        dout => grp_fu_679_p2);

    compensator_sdiv_ibs_U11 : component compensator_sdiv_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 31,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_756_ap_start,
        done => grp_fu_756_ap_done,
        din0 => mul_ln42_reg_1058,
        din1 => grp_fu_756_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_756_p2);

    compensator_mul_1jbC_U12 : component compensator_mul_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 14,
        din1_WIDTH => 51,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_778_p0,
        din1 => trunc_ln5_reg_1084,
        ce => ap_const_logic_1,
        dout => grp_fu_778_p2);

    compensator_mul_5kbM_U13 : component compensator_mul_5kbM
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 51,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_784_p0,
        din1 => mul_ln43_reg_1095,
        ce => ap_const_logic_1,
        dout => grp_fu_784_p2);

    compensator_mul_1lbW_U14 : component compensator_mul_1lbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 15,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_788_p0,
        din1 => p_fine_reg_1078,
        ce => ap_const_logic_1,
        dout => grp_fu_788_p2);

    compensator_mul_mmb6_U15 : component compensator_mul_mmb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 20,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln26_1_fu_861_p0,
        din1 => trunc_ln26_1_reg_938,
        dout => mul_ln26_1_fu_861_p2);

    compensator_mac_mncg_U16 : component compensator_mac_mncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 22,
        din2_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        din0 => grp_fu_868_p0,
        din1 => var1_s32_1_reg_966,
        din2 => ap_const_lv30_2F704000,
        dout => grp_fu_868_p3);

    compensator_mac_mocq_U17 : component compensator_mac_mocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 22,
        din2_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        din0 => grp_fu_877_p0,
        din1 => grp_fu_877_p1,
        din2 => grp_fu_877_p2,
        dout => grp_fu_877_p3);

    compensator_mul_mpcA_U18 : component compensator_mul_mpcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 22,
        dout_WIDTH => 35)
    port map (
        din0 => mul_ln35_fu_886_p0,
        din1 => add_ln31_reg_953,
        dout => mul_ln35_fu_886_p2);

    compensator_mul_mqcK_U19 : component compensator_mul_mqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        din0 => trunc_ln8_reg_983,
        din1 => var1_s32_2_fu_892_p1,
        dout => var1_s32_2_fu_892_p2);

    compensator_mul_mrcU_U20 : component compensator_mul_mrcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln53_fu_899_p0,
        din1 => mul_ln53_fu_899_p1,
        dout => mul_ln53_fu_899_p2);

    compensator_mul_msc4_U21 : component compensator_mul_msc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 25,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln53_1_fu_906_p0,
        din1 => trunc_ln53_1_reg_1028,
        dout => mul_ln53_1_fu_906_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln26_reg_928 <= add_ln26_fu_312_p2;
                hum_raw_read_reg_913 <= hum_raw;
                mul_ln25_reg_923 <= mul_ln25_fu_292_p2;
                pres_raw_read_reg_918 <= pres_raw;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln31_reg_953 <= add_ln31_fu_406_p2;
                sub_ln32_reg_961 <= sub_ln32_fu_428_p2;
                trunc_ln2_reg_948 <= add_ln28_fu_390_p2(23 downto 8);
                var1_s32_1_reg_966 <= var1_s32_1_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                add_ln45_2_reg_1115 <= add_ln45_2_fu_847_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                empty_20_reg_978 <= empty_20_fu_452_p2;
                tmp_14_reg_988 <= sub_ln50_fu_503_p2(31 downto 15);
                trunc_ln8_reg_983 <= add_ln50_1_fu_469_p2(31 downto 15);
                var2_s64_reg_973 <= var2_s64_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_ln35_2_reg_1023 <= mul_ln35_2_fu_638_p2;
                tmp_10_reg_1018 <= mul_ln35_1_fu_622_p2(52 downto 8);
                trunc_ln53_1_reg_1028 <= mul_ln53_fu_899_p2(31 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln35_reg_1003 <= mul_ln35_fu_886_p2;
                trunc_ln9_reg_1013 <= var1_s32_2_fu_892_p2(31 downto 15);
                var1_s32_2_reg_1008 <= var1_s32_2_fu_892_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_ln36_reg_1053 <= grp_fu_679_p2;
                mul_ln42_reg_1058 <= grp_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                mul_ln43_reg_1095 <= grp_fu_778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                p_fine_reg_1078 <= grp_fu_756_p2;
                trunc_ln5_reg_1084 <= grp_fu_756_p2(63 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                select_ln55_reg_1048 <= select_ln55_fu_729_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                sext_ln43_reg_1089 <= sext_ln43_fu_775_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sub_ln42_reg_993 <= sub_ln42_fu_558_p2;
                tmp_15_reg_998 <= grp_fu_877_p3(30 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                tmp_1_reg_1140 <= grp_fu_267_p2;
                tmp_4_reg_1145 <= grp_fu_257_p2;
                tmp_7_reg_1150 <= grp_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                tmp_3_reg_1130 <= grp_fu_272_p1;
                tmp_6_reg_1135 <= grp_fu_275_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                tmp_reg_1073 <= grp_fu_272_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln25_reg_933 <= trunc_ln25_fu_329_p1;
                trunc_ln26_1_reg_938 <= mul_ln26_fu_336_p2(31 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln26_2_reg_943 <= mul_ln26_1_fu_861_p2(25 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                trunc_ln43_1_reg_1100 <= grp_fu_784_p2(63 downto 25);
                trunc_ln6_reg_1105 <= grp_fu_788_p2(63 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln53_2_reg_1038 <= mul_ln53_1_fu_906_p2(31 downto 4);
                var1_s64_reg_1033 <= var1_s64_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                trunc_ln7_reg_1110 <= add_ln45_1_fu_829_p2(63 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln25_fu_318_p2 <= std_logic_vector(signed(ap_const_lv32_A6A81954) + signed(mul_ln25_reg_923));
    add_ln26_fu_312_p2 <= std_logic_vector(signed(ap_const_lv29_1FFF91B3) + signed(sext_ln26_fu_308_p1));
    add_ln28_1_fu_384_p2 <= std_logic_vector(unsigned(ap_const_lv24_80) + unsigned(shl_ln_fu_376_p3));
    add_ln28_fu_390_p2 <= std_logic_vector(signed(sext_ln27_fu_372_p1) + signed(add_ln28_1_fu_384_p2));
    add_ln31_fu_406_p2 <= std_logic_vector(signed(t_fine_fu_367_p2) + signed(ap_const_lv22_3E0C00));
    add_ln34_fu_542_p2 <= std_logic_vector(signed(ap_const_lv50_30E2000000000) + signed(p_cast_fu_539_p1));
    add_ln36_fu_737_p2 <= std_logic_vector(signed(ap_const_lv63_4821800000000000) + signed(mul_ln36_reg_1053));
    add_ln45_1_fu_829_p2 <= std_logic_vector(signed(p_fine_reg_1078) + signed(sext_ln45_fu_825_p1));
    add_ln45_2_fu_847_p2 <= std_logic_vector(unsigned(ap_const_lv57_26AC0) + unsigned(sext_ln45_1_fu_844_p1));
    add_ln45_fu_819_p2 <= std_logic_vector(signed(sext_ln43_1_fu_813_p1) + signed(sext_ln44_fu_816_p1));
    add_ln50_1_fu_469_p2 <= std_logic_vector(unsigned(shl_ln50_fu_461_p2) + unsigned(sext_ln50_2_fu_466_p1));
    and_ln50_1_fu_564_p3 <= (tmp_14_reg_988 & ap_const_lv5_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);

    ap_done_assign_proc : process(ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_20_fu_452_p1 <= sext_ln31_fu_440_p1(22 - 1 downto 0);
    empty_20_fu_452_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv48_1540000) * signed(empty_20_fu_452_p1))), 48));

    grp_fu_272_p0_assign_proc : process(sext_ln28_fu_761_p1, ap_CS_fsm_state64, sext_ln45_2_fu_853_p1, ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_fu_272_p0 <= sext_ln45_2_fu_853_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_272_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln28_fu_761_p1),64));
        else 
            grp_fu_272_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_275_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln55_reg_1048),32));
    grp_fu_593_p0 <= ap_const_lv64_C35(13 - 1 downto 0);
    grp_fu_679_p0 <= ap_const_lv63_9043(17 - 1 downto 0);

    grp_fu_756_ap_start_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_756_ap_start <= ap_const_logic_1;
        else 
            grp_fu_756_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_756_p1 <= grp_fu_756_p10(31 - 1 downto 0);
    grp_fu_756_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_742_p4),64));
    grp_fu_778_p0 <= ap_const_lv64_10BD(14 - 1 downto 0);
    grp_fu_784_p0 <= sext_ln43_reg_1089(51 - 1 downto 0);
    grp_fu_788_p0 <= ap_const_lv64_FFFFFFFFFFFFD80A(15 - 1 downto 0);
    grp_fu_868_p0 <= ap_const_lv29_1FFFFFCE(7 - 1 downto 0);
    grp_fu_877_p0 <= ap_const_lv31_182(10 - 1 downto 0);
    grp_fu_877_p1 <= grp_fu_877_p10(22 - 1 downto 0);
    grp_fu_877_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln50_fu_571_p2),31));
    grp_fu_877_p2 <= ap_const_lv31_2000(15 - 1 downto 0);

    hum_comp_ap_vld_assign_proc : process(ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            hum_comp_ap_vld <= ap_const_logic_1;
        else 
            hum_comp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln55_fu_713_p2 <= "1" when (unsigned(var1_s32_4_fu_705_p3) > unsigned(ap_const_lv31_19000000)) else "0";
    mul_ln25_fu_292_p1 <= trunc_ln_fu_278_p4;
    mul_ln25_fu_292_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_67AE) * signed(mul_ln25_fu_292_p1))), 32));
    mul_ln26_1_fu_861_p0 <= ap_const_lv26_32(7 - 1 downto 0);
    mul_ln26_fu_336_p0 <= sext_ln26_1_fu_333_p1(29 - 1 downto 0);
    mul_ln26_fu_336_p1 <= sext_ln26_1_fu_333_p1(29 - 1 downto 0);
    mul_ln26_fu_336_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln26_fu_336_p0) * signed(mul_ln26_fu_336_p1))), 32));
    mul_ln35_1_fu_622_p0 <= add_ln31_reg_953;
    mul_ln35_1_fu_622_p1 <= mul_ln35_reg_1003;
    mul_ln35_1_fu_622_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_1_fu_622_p0) * signed(mul_ln35_1_fu_622_p1))), 53));
    mul_ln35_2_fu_638_p1 <= add_ln31_reg_953;
    mul_ln35_2_fu_638_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv48_FFFFFD6A7000) * signed(mul_ln35_2_fu_638_p1))), 48));
    mul_ln35_fu_886_p0 <= ap_const_lv35_BD0(13 - 1 downto 0);
    mul_ln53_1_fu_906_p0 <= ap_const_lv32_4B(8 - 1 downto 0);
    mul_ln53_fu_899_p0 <= sext_ln53_fu_644_p1(17 - 1 downto 0);
    mul_ln53_fu_899_p1 <= sext_ln53_fu_644_p1(17 - 1 downto 0);
        p_cast_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_20_reg_978),50));


    pres_comp_ap_vld_assign_proc : process(ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            pres_comp_ap_vld <= ap_const_logic_1;
        else 
            pres_comp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln55_fu_729_p3 <= 
        ap_const_lv17_19000 when (icmp_ln55_fu_713_p2(0) = '1') else 
        tmp_17_fu_719_p4;
        sext_ln26_1_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_reg_928),32));

        sext_ln26_3_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln26_2_reg_943),22));

        sext_ln26_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_298_p4),29));

        sext_ln27_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_fine_fu_367_p2),24));

        sext_ln28_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_948),32));

        sext_ln31_3_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln31_fu_406_p2),26));

        sext_ln31_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln31_reg_953),48));

        sext_ln32_1_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(var2_s64_reg_973),64));

        sext_ln32_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_416_p3),26));

        sext_ln34_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_fu_542_p2),64));

        sext_ln35_2_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_reg_1018),48));

        sext_ln42_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_527_p3),64));

        sext_ln43_1_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln43_1_reg_1100),46));

        sext_ln43_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_reg_1084),64));

        sext_ln44_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_reg_1105),46));

        sext_ln45_1_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_reg_1110),57));

        sext_ln45_2_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln45_2_reg_1115),64));

        sext_ln45_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln45_fu_819_p2),64));

        sext_ln50_2_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_868_p3),32));

        sext_ln50_3_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln50_2_fu_492_p3),32));

        sext_ln53_2_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln53_2_reg_1038),32));

        sext_ln53_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_reg_1013),32));

    shl_ln1_fu_527_p3 <= (sub_ln41_fu_522_p2 & ap_const_lv31_0);
    shl_ln50_1_fu_485_p3 <= (var1_s32_1_reg_966 & ap_const_lv10_0);
    shl_ln50_2_fu_492_p3 <= (var1_s32_1_reg_966 & ap_const_lv6_0);
    shl_ln50_fu_461_p2 <= std_logic_vector(shift_left(unsigned(hum_raw_read_reg_913),to_integer(unsigned('0' & ap_const_lv32_E(31-1 downto 0)))));
    shl_ln_fu_376_p3 <= (t_fine_fu_367_p2 & ap_const_lv2_0);
    sub_ln32_fu_428_p2 <= std_logic_vector(signed(sext_ln31_3_fu_412_p1) - signed(sext_ln32_fu_424_p1));
    sub_ln41_fu_522_p2 <= std_logic_vector(unsigned(ap_const_lv32_100000) - unsigned(pres_raw_read_reg_918));
    sub_ln42_fu_558_p2 <= std_logic_vector(unsigned(var2_s64_2_fu_552_p2) - unsigned(sext_ln32_1_fu_519_p1));
    sub_ln50_fu_503_p2 <= std_logic_vector(unsigned(shl_ln50_1_fu_485_p3) - unsigned(sext_ln50_3_fu_499_p1));
    t_fine_fu_367_p2 <= std_logic_vector(unsigned(trunc_ln25_reg_933) + unsigned(sext_ln26_3_fu_364_p1));

    temp_comp_ap_vld_assign_proc : process(ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            temp_comp_ap_vld <= ap_const_logic_1;
        else 
            temp_comp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_13_fu_742_p4 <= add_ln36_fu_737_p2(62 downto 33);
    tmp_16_fu_697_p3 <= var1_s32_3_fu_688_p2(31 downto 31);
    tmp_17_fu_719_p4 <= var1_s32_4_fu_705_p3(28 downto 12);
    tmp_8_fu_416_p3 <= (add_ln31_fu_406_p2 & ap_const_lv3_0);
    trunc_ln1_fu_298_p4 <= temp_raw(31 downto 4);
    trunc_ln25_fu_329_p1 <= var1_s32_fu_323_p2(22 - 1 downto 0);
    trunc_ln53_fu_693_p1 <= var1_s32_3_fu_688_p2(31 - 1 downto 0);
    trunc_ln_fu_278_p4 <= temp_raw(31 downto 3);
    var1_s32_1_fu_434_p2 <= std_logic_vector(signed(ap_const_lv22_3ED400) + signed(t_fine_fu_367_p2));
    var1_s32_2_fu_892_p1 <= var1_s32_2_fu_892_p10(17 - 1 downto 0);
    var1_s32_2_fu_892_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_998),32));
    var1_s32_3_fu_688_p2 <= std_logic_vector(signed(var1_s32_2_reg_1008) - signed(sext_ln53_2_fu_685_p1));
    var1_s32_4_fu_705_p3 <= 
        ap_const_lv31_0 when (tmp_16_fu_697_p3(0) = '1') else 
        trunc_ln53_fu_693_p1;
    var1_s32_fu_323_p2 <= std_logic_vector(shift_right(signed(add_ln25_fu_318_p2),to_integer(unsigned('0' & ap_const_lv32_B(31-1 downto 0)))));
    var1_s64_fu_659_p2 <= std_logic_vector(signed(sext_ln35_2_fu_656_p1) + signed(mul_ln35_2_reg_1023));
    var2_s64_2_fu_552_p2 <= std_logic_vector(signed(sext_ln42_fu_535_p1) + signed(sext_ln34_fu_548_p1));
    var2_s64_fu_446_p0 <= sub_ln32_reg_961;
    var2_s64_fu_446_p1 <= sext_ln31_fu_440_p1(22 - 1 downto 0);
    var2_s64_fu_446_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(var2_s64_fu_446_p0) * signed(var2_s64_fu_446_p1))), 48));
    xor_ln50_fu_571_p2 <= (ap_const_lv22_200000 xor and_ln50_1_fu_564_p3);
end behav;
