// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="compensator,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.882000,HLS_SYN_LAT=101,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=66,HLS_SYN_FF=9718,HLS_SYN_LUT=8501,HLS_VERSION=2019_2}" *)

module compensator (
        ap_clk,
        ap_rst_n,
        s_axi_compensator_io_AWVALID,
        s_axi_compensator_io_AWREADY,
        s_axi_compensator_io_AWADDR,
        s_axi_compensator_io_WVALID,
        s_axi_compensator_io_WREADY,
        s_axi_compensator_io_WDATA,
        s_axi_compensator_io_WSTRB,
        s_axi_compensator_io_ARVALID,
        s_axi_compensator_io_ARREADY,
        s_axi_compensator_io_ARADDR,
        s_axi_compensator_io_RVALID,
        s_axi_compensator_io_RREADY,
        s_axi_compensator_io_RDATA,
        s_axi_compensator_io_RRESP,
        s_axi_compensator_io_BVALID,
        s_axi_compensator_io_BREADY,
        s_axi_compensator_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 102'd1;
parameter    ap_ST_fsm_state2 = 102'd2;
parameter    ap_ST_fsm_state3 = 102'd4;
parameter    ap_ST_fsm_state4 = 102'd8;
parameter    ap_ST_fsm_state5 = 102'd16;
parameter    ap_ST_fsm_state6 = 102'd32;
parameter    ap_ST_fsm_state7 = 102'd64;
parameter    ap_ST_fsm_state8 = 102'd128;
parameter    ap_ST_fsm_state9 = 102'd256;
parameter    ap_ST_fsm_state10 = 102'd512;
parameter    ap_ST_fsm_state11 = 102'd1024;
parameter    ap_ST_fsm_state12 = 102'd2048;
parameter    ap_ST_fsm_state13 = 102'd4096;
parameter    ap_ST_fsm_state14 = 102'd8192;
parameter    ap_ST_fsm_state15 = 102'd16384;
parameter    ap_ST_fsm_state16 = 102'd32768;
parameter    ap_ST_fsm_state17 = 102'd65536;
parameter    ap_ST_fsm_state18 = 102'd131072;
parameter    ap_ST_fsm_state19 = 102'd262144;
parameter    ap_ST_fsm_state20 = 102'd524288;
parameter    ap_ST_fsm_state21 = 102'd1048576;
parameter    ap_ST_fsm_state22 = 102'd2097152;
parameter    ap_ST_fsm_state23 = 102'd4194304;
parameter    ap_ST_fsm_state24 = 102'd8388608;
parameter    ap_ST_fsm_state25 = 102'd16777216;
parameter    ap_ST_fsm_state26 = 102'd33554432;
parameter    ap_ST_fsm_state27 = 102'd67108864;
parameter    ap_ST_fsm_state28 = 102'd134217728;
parameter    ap_ST_fsm_state29 = 102'd268435456;
parameter    ap_ST_fsm_state30 = 102'd536870912;
parameter    ap_ST_fsm_state31 = 102'd1073741824;
parameter    ap_ST_fsm_state32 = 102'd2147483648;
parameter    ap_ST_fsm_state33 = 102'd4294967296;
parameter    ap_ST_fsm_state34 = 102'd8589934592;
parameter    ap_ST_fsm_state35 = 102'd17179869184;
parameter    ap_ST_fsm_state36 = 102'd34359738368;
parameter    ap_ST_fsm_state37 = 102'd68719476736;
parameter    ap_ST_fsm_state38 = 102'd137438953472;
parameter    ap_ST_fsm_state39 = 102'd274877906944;
parameter    ap_ST_fsm_state40 = 102'd549755813888;
parameter    ap_ST_fsm_state41 = 102'd1099511627776;
parameter    ap_ST_fsm_state42 = 102'd2199023255552;
parameter    ap_ST_fsm_state43 = 102'd4398046511104;
parameter    ap_ST_fsm_state44 = 102'd8796093022208;
parameter    ap_ST_fsm_state45 = 102'd17592186044416;
parameter    ap_ST_fsm_state46 = 102'd35184372088832;
parameter    ap_ST_fsm_state47 = 102'd70368744177664;
parameter    ap_ST_fsm_state48 = 102'd140737488355328;
parameter    ap_ST_fsm_state49 = 102'd281474976710656;
parameter    ap_ST_fsm_state50 = 102'd562949953421312;
parameter    ap_ST_fsm_state51 = 102'd1125899906842624;
parameter    ap_ST_fsm_state52 = 102'd2251799813685248;
parameter    ap_ST_fsm_state53 = 102'd4503599627370496;
parameter    ap_ST_fsm_state54 = 102'd9007199254740992;
parameter    ap_ST_fsm_state55 = 102'd18014398509481984;
parameter    ap_ST_fsm_state56 = 102'd36028797018963968;
parameter    ap_ST_fsm_state57 = 102'd72057594037927936;
parameter    ap_ST_fsm_state58 = 102'd144115188075855872;
parameter    ap_ST_fsm_state59 = 102'd288230376151711744;
parameter    ap_ST_fsm_state60 = 102'd576460752303423488;
parameter    ap_ST_fsm_state61 = 102'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 102'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 102'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 102'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 102'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 102'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 102'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 102'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 102'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 102'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 102'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 102'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 102'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 102'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 102'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 102'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 102'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 102'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 102'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 102'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 102'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 102'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 102'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 102'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 102'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 102'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 102'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 102'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 102'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 102'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 102'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 102'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 102'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 102'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 102'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 102'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 102'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 102'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 102'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 102'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 102'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 102'd2535301200456458802993406410752;
parameter    C_S_AXI_COMPENSATOR_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_COMPENSATOR_IO_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_COMPENSATOR_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_compensator_io_AWVALID;
output   s_axi_compensator_io_AWREADY;
input  [C_S_AXI_COMPENSATOR_IO_ADDR_WIDTH - 1:0] s_axi_compensator_io_AWADDR;
input   s_axi_compensator_io_WVALID;
output   s_axi_compensator_io_WREADY;
input  [C_S_AXI_COMPENSATOR_IO_DATA_WIDTH - 1:0] s_axi_compensator_io_WDATA;
input  [C_S_AXI_COMPENSATOR_IO_WSTRB_WIDTH - 1:0] s_axi_compensator_io_WSTRB;
input   s_axi_compensator_io_ARVALID;
output   s_axi_compensator_io_ARREADY;
input  [C_S_AXI_COMPENSATOR_IO_ADDR_WIDTH - 1:0] s_axi_compensator_io_ARADDR;
output   s_axi_compensator_io_RVALID;
input   s_axi_compensator_io_RREADY;
output  [C_S_AXI_COMPENSATOR_IO_DATA_WIDTH - 1:0] s_axi_compensator_io_RDATA;
output  [1:0] s_axi_compensator_io_RRESP;
output   s_axi_compensator_io_BVALID;
input   s_axi_compensator_io_BREADY;
output  [1:0] s_axi_compensator_io_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [101:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    temp_comp_ap_vld;
reg    pres_comp_ap_vld;
reg    hum_comp_ap_vld;
wire   [31:0] temp_raw;
wire   [31:0] pres_raw;
wire   [31:0] hum_raw;
reg   [31:0] hum_raw_read_reg_913;
reg   [31:0] pres_raw_read_reg_918;
wire   [31:0] mul_ln25_fu_292_p2;
reg   [31:0] mul_ln25_reg_923;
wire   [28:0] add_ln26_fu_312_p2;
reg   [28:0] add_ln26_reg_928;
wire   [21:0] trunc_ln25_fu_329_p1;
reg   [21:0] trunc_ln25_reg_933;
wire    ap_CS_fsm_state2;
reg  signed [19:0] trunc_ln26_1_reg_938;
reg   [11:0] trunc_ln26_2_reg_943;
wire    ap_CS_fsm_state3;
reg   [15:0] trunc_ln2_reg_948;
wire    ap_CS_fsm_state4;
wire  signed [21:0] add_ln31_fu_406_p2;
reg  signed [21:0] add_ln31_reg_953;
wire   [25:0] sub_ln32_fu_428_p2;
reg   [25:0] sub_ln32_reg_961;
wire  signed [21:0] var1_s32_1_fu_434_p2;
reg  signed [21:0] var1_s32_1_reg_966;
wire  signed [47:0] var2_s64_fu_446_p2;
reg  signed [47:0] var2_s64_reg_973;
wire    ap_CS_fsm_state5;
wire   [47:0] empty_20_fu_452_p2;
reg   [47:0] empty_20_reg_978;
reg  signed [16:0] trunc_ln8_reg_983;
reg   [16:0] tmp_14_reg_988;
wire  signed [63:0] sub_ln42_fu_558_p2;
reg  signed [63:0] sub_ln42_reg_993;
wire    ap_CS_fsm_state6;
reg   [16:0] tmp_15_reg_998;
wire  signed [34:0] mul_ln35_fu_886_p2;
reg  signed [34:0] mul_ln35_reg_1003;
wire    ap_CS_fsm_state7;
wire  signed [31:0] var1_s32_2_fu_892_p2;
reg  signed [31:0] var1_s32_2_reg_1008;
reg   [16:0] trunc_ln9_reg_1013;
reg   [44:0] tmp_10_reg_1018;
wire    ap_CS_fsm_state8;
wire   [47:0] mul_ln35_2_fu_638_p2;
reg   [47:0] mul_ln35_2_reg_1023;
reg  signed [24:0] trunc_ln53_1_reg_1028;
wire   [47:0] var1_s64_fu_659_p2;
reg  signed [47:0] var1_s64_reg_1033;
wire    ap_CS_fsm_state9;
reg   [27:0] trunc_ln53_2_reg_1038;
wire    ap_CS_fsm_state10;
wire   [16:0] select_ln55_fu_729_p3;
reg   [16:0] select_ln55_reg_1048;
wire   [62:0] grp_fu_679_p2;
reg   [62:0] mul_ln36_reg_1053;
wire    ap_CS_fsm_state11;
wire   [63:0] grp_fu_593_p2;
reg   [63:0] mul_ln42_reg_1058;
wire    ap_CS_fsm_state12;
wire  signed [31:0] sext_ln28_fu_761_p1;
wire    ap_CS_fsm_state64;
wire   [63:0] grp_fu_272_p1;
reg   [63:0] tmp_reg_1073;
wire    ap_CS_fsm_state69;
wire  signed [63:0] grp_fu_756_p2;
reg  signed [63:0] p_fine_reg_1078;
wire    ap_CS_fsm_state79;
reg  signed [50:0] trunc_ln5_reg_1084;
wire  signed [63:0] sext_ln43_fu_775_p1;
reg  signed [63:0] sext_ln43_reg_1089;
wire    ap_CS_fsm_state80;
wire  signed [63:0] grp_fu_778_p2;
reg  signed [63:0] mul_ln43_reg_1095;
wire    ap_CS_fsm_state81;
reg   [38:0] trunc_ln43_1_reg_1100;
wire    ap_CS_fsm_state86;
reg   [44:0] trunc_ln6_reg_1105;
reg   [55:0] trunc_ln7_reg_1110;
wire    ap_CS_fsm_state87;
wire   [56:0] add_ln45_2_fu_847_p2;
reg   [56:0] add_ln45_2_reg_1115;
wire    ap_CS_fsm_state88;
wire  signed [63:0] sext_ln45_2_fu_853_p1;
wire    ap_CS_fsm_state89;
reg   [63:0] tmp_3_reg_1130;
wire    ap_CS_fsm_state94;
wire   [63:0] grp_fu_275_p1;
reg   [63:0] tmp_6_reg_1135;
wire   [63:0] grp_fu_267_p2;
reg   [63:0] tmp_1_reg_1140;
wire    ap_CS_fsm_state100;
wire   [63:0] grp_fu_257_p2;
reg   [63:0] tmp_4_reg_1145;
wire   [63:0] grp_fu_262_p2;
reg   [63:0] tmp_7_reg_1150;
wire   [31:0] grp_fu_245_p1;
wire    ap_CS_fsm_state102;
wire   [31:0] grp_fu_249_p1;
wire   [31:0] grp_fu_253_p1;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state70;
reg  signed [63:0] grp_fu_272_p0;
wire   [31:0] grp_fu_275_p0;
wire   [28:0] trunc_ln_fu_278_p4;
wire  signed [28:0] mul_ln25_fu_292_p1;
wire   [27:0] trunc_ln1_fu_298_p4;
wire  signed [28:0] sext_ln26_fu_308_p1;
wire   [31:0] add_ln25_fu_318_p2;
wire   [31:0] var1_s32_fu_323_p2;
wire  signed [28:0] mul_ln26_fu_336_p0;
wire  signed [31:0] sext_ln26_1_fu_333_p1;
wire  signed [28:0] mul_ln26_fu_336_p1;
wire   [31:0] mul_ln26_fu_336_p2;
wire  signed [25:0] mul_ln26_1_fu_861_p2;
wire  signed [21:0] sext_ln26_3_fu_364_p1;
wire  signed [21:0] t_fine_fu_367_p2;
wire   [23:0] shl_ln_fu_376_p3;
wire  signed [23:0] sext_ln27_fu_372_p1;
wire   [23:0] add_ln28_1_fu_384_p2;
wire   [23:0] add_ln28_fu_390_p2;
wire   [24:0] tmp_8_fu_416_p3;
wire  signed [25:0] sext_ln31_3_fu_412_p1;
wire  signed [25:0] sext_ln32_fu_424_p1;
wire  signed [25:0] var2_s64_fu_446_p0;
wire  signed [21:0] var2_s64_fu_446_p1;
wire  signed [47:0] sext_ln31_fu_440_p1;
wire  signed [21:0] empty_20_fu_452_p1;
wire  signed [29:0] grp_fu_868_p3;
wire   [31:0] shl_ln50_fu_461_p2;
wire  signed [31:0] sext_ln50_2_fu_466_p1;
wire   [31:0] add_ln50_1_fu_469_p2;
wire   [27:0] shl_ln50_2_fu_492_p3;
wire   [31:0] shl_ln50_1_fu_485_p3;
wire  signed [31:0] sext_ln50_3_fu_499_p1;
wire   [31:0] sub_ln50_fu_503_p2;
wire   [31:0] sub_ln41_fu_522_p2;
wire   [62:0] shl_ln1_fu_527_p3;
wire  signed [49:0] p_cast_fu_539_p1;
wire   [49:0] add_ln34_fu_542_p2;
wire  signed [63:0] sext_ln42_fu_535_p1;
wire  signed [63:0] sext_ln34_fu_548_p1;
wire   [63:0] var2_s64_2_fu_552_p2;
wire  signed [63:0] sext_ln32_1_fu_519_p1;
wire   [21:0] and_ln50_1_fu_564_p3;
wire   [21:0] xor_ln50_fu_571_p2;
wire   [30:0] grp_fu_877_p3;
wire   [12:0] grp_fu_593_p0;
wire  signed [21:0] mul_ln35_1_fu_622_p0;
wire  signed [34:0] mul_ln35_1_fu_622_p1;
wire   [52:0] mul_ln35_1_fu_622_p2;
wire  signed [21:0] mul_ln35_2_fu_638_p1;
wire  signed [31:0] mul_ln53_fu_899_p2;
wire  signed [47:0] sext_ln35_2_fu_656_p1;
wire  signed [31:0] mul_ln53_1_fu_906_p2;
wire   [16:0] grp_fu_679_p0;
wire  signed [31:0] sext_ln53_2_fu_685_p1;
(* use_dsp48 = "no" *) wire   [31:0] var1_s32_3_fu_688_p2;
wire   [0:0] tmp_16_fu_697_p3;
wire   [30:0] trunc_ln53_fu_693_p1;
wire   [30:0] var1_s32_4_fu_705_p3;
wire   [0:0] icmp_ln55_fu_713_p2;
wire   [16:0] tmp_17_fu_719_p4;
wire   [62:0] add_ln36_fu_737_p2;
wire   [29:0] tmp_13_fu_742_p4;
wire   [30:0] grp_fu_756_p1;
wire   [13:0] grp_fu_778_p0;
wire  signed [50:0] grp_fu_784_p0;
wire    ap_CS_fsm_state82;
wire  signed [14:0] grp_fu_788_p0;
wire   [63:0] grp_fu_784_p2;
wire   [63:0] grp_fu_788_p2;
wire  signed [45:0] sext_ln43_1_fu_813_p1;
wire  signed [45:0] sext_ln44_fu_816_p1;
wire   [45:0] add_ln45_fu_819_p2;
wire  signed [63:0] sext_ln45_fu_825_p1;
wire   [63:0] add_ln45_1_fu_829_p2;
wire  signed [56:0] sext_ln45_1_fu_844_p1;
wire   [6:0] mul_ln26_1_fu_861_p0;
wire  signed [6:0] grp_fu_868_p0;
wire   [9:0] grp_fu_877_p0;
wire   [21:0] grp_fu_877_p1;
wire   [14:0] grp_fu_877_p2;
wire   [12:0] mul_ln35_fu_886_p0;
wire   [16:0] var1_s32_2_fu_892_p1;
wire  signed [16:0] mul_ln53_fu_899_p0;
wire  signed [31:0] sext_ln53_fu_644_p1;
wire  signed [16:0] mul_ln53_fu_899_p1;
wire   [7:0] mul_ln53_1_fu_906_p0;
reg    grp_fu_756_ap_start;
wire    grp_fu_756_ap_done;
reg   [101:0] ap_NS_fsm;
wire   [63:0] grp_fu_756_p10;
wire   [30:0] grp_fu_877_p10;
wire   [31:0] var1_s32_2_fu_892_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 102'd1;
end

compensator_compensator_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_COMPENSATOR_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_COMPENSATOR_IO_DATA_WIDTH ))
compensator_compensator_io_s_axi_U(
    .AWVALID(s_axi_compensator_io_AWVALID),
    .AWREADY(s_axi_compensator_io_AWREADY),
    .AWADDR(s_axi_compensator_io_AWADDR),
    .WVALID(s_axi_compensator_io_WVALID),
    .WREADY(s_axi_compensator_io_WREADY),
    .WDATA(s_axi_compensator_io_WDATA),
    .WSTRB(s_axi_compensator_io_WSTRB),
    .ARVALID(s_axi_compensator_io_ARVALID),
    .ARREADY(s_axi_compensator_io_ARREADY),
    .ARADDR(s_axi_compensator_io_ARADDR),
    .RVALID(s_axi_compensator_io_RVALID),
    .RREADY(s_axi_compensator_io_RREADY),
    .RDATA(s_axi_compensator_io_RDATA),
    .RRESP(s_axi_compensator_io_RRESP),
    .BVALID(s_axi_compensator_io_BVALID),
    .BREADY(s_axi_compensator_io_BREADY),
    .BRESP(s_axi_compensator_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .temp_comp(grp_fu_245_p1),
    .temp_comp_ap_vld(temp_comp_ap_vld),
    .pres_comp(grp_fu_249_p1),
    .pres_comp_ap_vld(pres_comp_ap_vld),
    .hum_comp(grp_fu_253_p1),
    .hum_comp_ap_vld(hum_comp_ap_vld),
    .temp_raw(temp_raw),
    .pres_raw(pres_raw),
    .hum_raw(hum_raw)
);

compensator_fptrubkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
compensator_fptrubkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_1_reg_1140),
    .ce(1'b1),
    .dout(grp_fu_245_p1)
);

compensator_fptrubkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
compensator_fptrubkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_4_reg_1145),
    .ce(1'b1),
    .dout(grp_fu_249_p1)
);

compensator_fptrubkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
compensator_fptrubkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_7_reg_1150),
    .ce(1'b1),
    .dout(grp_fu_253_p1)
);

compensator_dmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
compensator_dmul_cud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_reg_1130),
    .din1(64'd4571153621781053440),
    .ce(1'b1),
    .dout(grp_fu_257_p2)
);

compensator_dmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
compensator_dmul_cud_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_6_reg_1135),
    .din1(64'd4562146422526312448),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

compensator_ddiv_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
compensator_ddiv_dEe_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_1073),
    .din1(64'd4636737291354636288),
    .ce(1'b1),
    .dout(grp_fu_267_p2)
);

compensator_sitodeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
compensator_sitodeOg_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_272_p0),
    .ce(1'b1),
    .dout(grp_fu_272_p1)
);

compensator_sitodfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
compensator_sitodfYi_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_275_p0),
    .ce(1'b1),
    .dout(grp_fu_275_p1)
);

compensator_mul_1g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
compensator_mul_1g8j_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_593_p0),
    .din1(sub_ln42_reg_993),
    .ce(1'b1),
    .dout(grp_fu_593_p2)
);

compensator_mul_1hbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 63 ))
compensator_mul_1hbi_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_679_p0),
    .din1(var1_s64_reg_1033),
    .ce(1'b1),
    .dout(grp_fu_679_p2)
);

compensator_sdiv_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 64 ))
compensator_sdiv_ibs_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_756_ap_start),
    .done(grp_fu_756_ap_done),
    .din0(mul_ln42_reg_1058),
    .din1(grp_fu_756_p1),
    .ce(1'b1),
    .dout(grp_fu_756_p2)
);

compensator_mul_1jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 51 ),
    .dout_WIDTH( 64 ))
compensator_mul_1jbC_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_778_p0),
    .din1(trunc_ln5_reg_1084),
    .ce(1'b1),
    .dout(grp_fu_778_p2)
);

compensator_mul_5kbM #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 51 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
compensator_mul_5kbM_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_784_p0),
    .din1(mul_ln43_reg_1095),
    .ce(1'b1),
    .dout(grp_fu_784_p2)
);

compensator_mul_1lbW #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
compensator_mul_1lbW_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_788_p0),
    .din1(p_fine_reg_1078),
    .ce(1'b1),
    .dout(grp_fu_788_p2)
);

compensator_mul_mmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 26 ))
compensator_mul_mmb6_U15(
    .din0(mul_ln26_1_fu_861_p0),
    .din1(trunc_ln26_1_reg_938),
    .dout(mul_ln26_1_fu_861_p2)
);

compensator_mac_mncg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 22 ),
    .din2_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
compensator_mac_mncg_U16(
    .din0(grp_fu_868_p0),
    .din1(var1_s32_1_reg_966),
    .din2(30'd795885568),
    .dout(grp_fu_868_p3)
);

compensator_mac_mocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 22 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
compensator_mac_mocq_U17(
    .din0(grp_fu_877_p0),
    .din1(grp_fu_877_p1),
    .din2(grp_fu_877_p2),
    .dout(grp_fu_877_p3)
);

compensator_mul_mpcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 35 ))
compensator_mul_mpcA_U18(
    .din0(mul_ln35_fu_886_p0),
    .din1(add_ln31_reg_953),
    .dout(mul_ln35_fu_886_p2)
);

compensator_mul_mqcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
compensator_mul_mqcK_U19(
    .din0(trunc_ln8_reg_983),
    .din1(var1_s32_2_fu_892_p1),
    .dout(var1_s32_2_fu_892_p2)
);

compensator_mul_mrcU #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
compensator_mul_mrcU_U20(
    .din0(mul_ln53_fu_899_p0),
    .din1(mul_ln53_fu_899_p1),
    .dout(mul_ln53_fu_899_p2)
);

compensator_mul_msc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 32 ))
compensator_mul_msc4_U21(
    .din0(mul_ln53_1_fu_906_p0),
    .din1(trunc_ln53_1_reg_1028),
    .dout(mul_ln53_1_fu_906_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln26_reg_928 <= add_ln26_fu_312_p2;
        hum_raw_read_reg_913 <= hum_raw;
        mul_ln25_reg_923 <= mul_ln25_fu_292_p2;
        pres_raw_read_reg_918 <= pres_raw;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln31_reg_953 <= add_ln31_fu_406_p2;
        sub_ln32_reg_961 <= sub_ln32_fu_428_p2;
        trunc_ln2_reg_948 <= {{add_ln28_fu_390_p2[23:8]}};
        var1_s32_1_reg_966 <= var1_s32_1_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        add_ln45_2_reg_1115 <= add_ln45_2_fu_847_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_20_reg_978 <= empty_20_fu_452_p2;
        tmp_14_reg_988 <= {{sub_ln50_fu_503_p2[31:15]}};
        trunc_ln8_reg_983 <= {{add_ln50_1_fu_469_p2[31:15]}};
        var2_s64_reg_973 <= var2_s64_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln35_2_reg_1023 <= mul_ln35_2_fu_638_p2;
        tmp_10_reg_1018 <= {{mul_ln35_1_fu_622_p2[52:8]}};
        trunc_ln53_1_reg_1028 <= {{mul_ln53_fu_899_p2[31:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln35_reg_1003 <= mul_ln35_fu_886_p2;
        trunc_ln9_reg_1013 <= {{var1_s32_2_fu_892_p2[31:15]}};
        var1_s32_2_reg_1008 <= var1_s32_2_fu_892_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln36_reg_1053 <= grp_fu_679_p2;
        mul_ln42_reg_1058 <= grp_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        mul_ln43_reg_1095 <= grp_fu_778_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        p_fine_reg_1078 <= grp_fu_756_p2;
        trunc_ln5_reg_1084 <= {{grp_fu_756_p2[63:13]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        select_ln55_reg_1048 <= select_ln55_fu_729_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        sext_ln43_reg_1089 <= sext_ln43_fu_775_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sub_ln42_reg_993 <= sub_ln42_fu_558_p2;
        tmp_15_reg_998 <= {{grp_fu_877_p3[30:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        tmp_1_reg_1140 <= grp_fu_267_p2;
        tmp_4_reg_1145 <= grp_fu_257_p2;
        tmp_7_reg_1150 <= grp_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        tmp_3_reg_1130 <= grp_fu_272_p1;
        tmp_6_reg_1135 <= grp_fu_275_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        tmp_reg_1073 <= grp_fu_272_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln25_reg_933 <= trunc_ln25_fu_329_p1;
        trunc_ln26_1_reg_938 <= {{mul_ln26_fu_336_p2[31:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln26_2_reg_943 <= {{mul_ln26_1_fu_861_p2[25:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        trunc_ln43_1_reg_1100 <= {{grp_fu_784_p2[63:25]}};
        trunc_ln6_reg_1105 <= {{grp_fu_788_p2[63:19]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln53_2_reg_1038 <= {{mul_ln53_1_fu_906_p2[31:4]}};
        var1_s64_reg_1033 <= var1_s64_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        trunc_ln7_reg_1110 <= {{add_ln45_1_fu_829_p2[63:8]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_272_p0 = sext_ln45_2_fu_853_p1;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_272_p0 = sext_ln28_fu_761_p1;
    end else begin
        grp_fu_272_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_756_ap_start = 1'b1;
    end else begin
        grp_fu_756_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        hum_comp_ap_vld = 1'b1;
    end else begin
        hum_comp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        pres_comp_ap_vld = 1'b1;
    end else begin
        pres_comp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        temp_comp_ap_vld = 1'b1;
    end else begin
        temp_comp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_318_p2 = ($signed(32'd2796034388) + $signed(mul_ln25_reg_923));

assign add_ln26_fu_312_p2 = ($signed(29'd536842675) + $signed(sext_ln26_fu_308_p1));

assign add_ln28_1_fu_384_p2 = (24'd128 + shl_ln_fu_376_p3);

assign add_ln28_fu_390_p2 = ($signed(sext_ln27_fu_372_p1) + $signed(add_ln28_1_fu_384_p2));

assign add_ln31_fu_406_p2 = ($signed(t_fine_fu_367_p2) + $signed(22'd4066304));

assign add_ln34_fu_542_p2 = ($signed(50'd859955531874304) + $signed(p_cast_fu_539_p1));

assign add_ln36_fu_737_p2 = ($signed(63'd5197576182450618368) + $signed(mul_ln36_reg_1053));

assign add_ln45_1_fu_829_p2 = ($signed(p_fine_reg_1078) + $signed(sext_ln45_fu_825_p1));

assign add_ln45_2_fu_847_p2 = ($signed(57'd158400) + $signed(sext_ln45_1_fu_844_p1));

assign add_ln45_fu_819_p2 = ($signed(sext_ln43_1_fu_813_p1) + $signed(sext_ln44_fu_816_p1));

assign add_ln50_1_fu_469_p2 = ($signed(shl_ln50_fu_461_p2) + $signed(sext_ln50_2_fu_466_p1));

assign and_ln50_1_fu_564_p3 = {{tmp_14_reg_988}, {5'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_20_fu_452_p1 = sext_ln31_fu_440_p1;

assign empty_20_fu_452_p2 = ($signed({{1'b0}, {48'd22282240}}) * $signed(empty_20_fu_452_p1));

assign grp_fu_275_p0 = select_ln55_reg_1048;

assign grp_fu_593_p0 = 64'd3125;

assign grp_fu_679_p0 = 63'd36931;

assign grp_fu_756_p1 = grp_fu_756_p10;

assign grp_fu_756_p10 = tmp_13_fu_742_p4;

assign grp_fu_778_p0 = 64'd4285;

assign grp_fu_784_p0 = sext_ln43_reg_1089;

assign grp_fu_788_p0 = 64'd18446744073709541386;

assign grp_fu_868_p0 = 29'd536870862;

assign grp_fu_877_p0 = 31'd386;

assign grp_fu_877_p1 = grp_fu_877_p10;

assign grp_fu_877_p10 = xor_ln50_fu_571_p2;

assign grp_fu_877_p2 = 31'd8192;

assign icmp_ln55_fu_713_p2 = ((var1_s32_4_fu_705_p3 > 31'd419430400) ? 1'b1 : 1'b0);

assign mul_ln25_fu_292_p1 = trunc_ln_fu_278_p4;

assign mul_ln25_fu_292_p2 = ($signed({{1'b0}, {32'd26542}}) * $signed(mul_ln25_fu_292_p1));

assign mul_ln26_1_fu_861_p0 = 26'd50;

assign mul_ln26_fu_336_p0 = sext_ln26_1_fu_333_p1;

assign mul_ln26_fu_336_p1 = sext_ln26_1_fu_333_p1;

assign mul_ln26_fu_336_p2 = ($signed(mul_ln26_fu_336_p0) * $signed(mul_ln26_fu_336_p1));

assign mul_ln35_1_fu_622_p0 = add_ln31_reg_953;

assign mul_ln35_1_fu_622_p1 = mul_ln35_reg_1003;

assign mul_ln35_1_fu_622_p2 = ($signed(mul_ln35_1_fu_622_p0) * $signed(mul_ln35_1_fu_622_p1));

assign mul_ln35_2_fu_638_p1 = add_ln31_reg_953;

assign mul_ln35_2_fu_638_p2 = ($signed(48'd281474933354496) * $signed(mul_ln35_2_fu_638_p1));

assign mul_ln35_fu_886_p0 = 35'd3024;

assign mul_ln53_1_fu_906_p0 = 32'd75;

assign mul_ln53_fu_899_p0 = sext_ln53_fu_644_p1;

assign mul_ln53_fu_899_p1 = sext_ln53_fu_644_p1;

assign p_cast_fu_539_p1 = $signed(empty_20_reg_978);

assign select_ln55_fu_729_p3 = ((icmp_ln55_fu_713_p2[0:0] === 1'b1) ? 17'd102400 : tmp_17_fu_719_p4);

assign sext_ln26_1_fu_333_p1 = $signed(add_ln26_reg_928);

assign sext_ln26_3_fu_364_p1 = $signed(trunc_ln26_2_reg_943);

assign sext_ln26_fu_308_p1 = $signed(trunc_ln1_fu_298_p4);

assign sext_ln27_fu_372_p1 = t_fine_fu_367_p2;

assign sext_ln28_fu_761_p1 = $signed(trunc_ln2_reg_948);

assign sext_ln31_3_fu_412_p1 = add_ln31_fu_406_p2;

assign sext_ln31_fu_440_p1 = add_ln31_reg_953;

assign sext_ln32_1_fu_519_p1 = var2_s64_reg_973;

assign sext_ln32_fu_424_p1 = $signed(tmp_8_fu_416_p3);

assign sext_ln34_fu_548_p1 = $signed(add_ln34_fu_542_p2);

assign sext_ln35_2_fu_656_p1 = $signed(tmp_10_reg_1018);

assign sext_ln42_fu_535_p1 = $signed(shl_ln1_fu_527_p3);

assign sext_ln43_1_fu_813_p1 = $signed(trunc_ln43_1_reg_1100);

assign sext_ln43_fu_775_p1 = trunc_ln5_reg_1084;

assign sext_ln44_fu_816_p1 = $signed(trunc_ln6_reg_1105);

assign sext_ln45_1_fu_844_p1 = $signed(trunc_ln7_reg_1110);

assign sext_ln45_2_fu_853_p1 = $signed(add_ln45_2_reg_1115);

assign sext_ln45_fu_825_p1 = $signed(add_ln45_fu_819_p2);

assign sext_ln50_2_fu_466_p1 = grp_fu_868_p3;

assign sext_ln50_3_fu_499_p1 = $signed(shl_ln50_2_fu_492_p3);

assign sext_ln53_2_fu_685_p1 = $signed(trunc_ln53_2_reg_1038);

assign sext_ln53_fu_644_p1 = $signed(trunc_ln9_reg_1013);

assign shl_ln1_fu_527_p3 = {{sub_ln41_fu_522_p2}, {31'd0}};

assign shl_ln50_1_fu_485_p3 = {{var1_s32_1_reg_966}, {10'd0}};

assign shl_ln50_2_fu_492_p3 = {{var1_s32_1_reg_966}, {6'd0}};

assign shl_ln50_fu_461_p2 = hum_raw_read_reg_913 << 32'd14;

assign shl_ln_fu_376_p3 = {{t_fine_fu_367_p2}, {2'd0}};

assign sub_ln32_fu_428_p2 = ($signed(sext_ln31_3_fu_412_p1) - $signed(sext_ln32_fu_424_p1));

assign sub_ln41_fu_522_p2 = (32'd1048576 - pres_raw_read_reg_918);

assign sub_ln42_fu_558_p2 = ($signed(var2_s64_2_fu_552_p2) - $signed(sext_ln32_1_fu_519_p1));

assign sub_ln50_fu_503_p2 = ($signed(shl_ln50_1_fu_485_p3) - $signed(sext_ln50_3_fu_499_p1));

assign t_fine_fu_367_p2 = ($signed(trunc_ln25_reg_933) + $signed(sext_ln26_3_fu_364_p1));

assign tmp_13_fu_742_p4 = {{add_ln36_fu_737_p2[62:33]}};

assign tmp_16_fu_697_p3 = var1_s32_3_fu_688_p2[32'd31];

assign tmp_17_fu_719_p4 = {{var1_s32_4_fu_705_p3[28:12]}};

assign tmp_8_fu_416_p3 = {{add_ln31_fu_406_p2}, {3'd0}};

assign trunc_ln1_fu_298_p4 = {{temp_raw[31:4]}};

assign trunc_ln25_fu_329_p1 = var1_s32_fu_323_p2[21:0];

assign trunc_ln53_fu_693_p1 = var1_s32_3_fu_688_p2[30:0];

assign trunc_ln_fu_278_p4 = {{temp_raw[31:3]}};

assign var1_s32_1_fu_434_p2 = ($signed(22'd4117504) + $signed(t_fine_fu_367_p2));

assign var1_s32_2_fu_892_p1 = var1_s32_2_fu_892_p10;

assign var1_s32_2_fu_892_p10 = tmp_15_reg_998;

assign var1_s32_3_fu_688_p2 = ($signed(var1_s32_2_reg_1008) - $signed(sext_ln53_2_fu_685_p1));

assign var1_s32_4_fu_705_p3 = ((tmp_16_fu_697_p3[0:0] === 1'b1) ? 31'd0 : trunc_ln53_fu_693_p1);

assign var1_s32_fu_323_p2 = $signed(add_ln25_fu_318_p2) >>> 32'd11;

assign var1_s64_fu_659_p2 = ($signed(sext_ln35_2_fu_656_p1) + $signed(mul_ln35_2_reg_1023));

assign var2_s64_2_fu_552_p2 = ($signed(sext_ln42_fu_535_p1) + $signed(sext_ln34_fu_548_p1));

assign var2_s64_fu_446_p0 = sub_ln32_reg_961;

assign var2_s64_fu_446_p1 = sext_ln31_fu_440_p1;

assign var2_s64_fu_446_p2 = ($signed(var2_s64_fu_446_p0) * $signed(var2_s64_fu_446_p1));

assign xor_ln50_fu_571_p2 = (22'd2097152 ^ and_ln50_1_fu_564_p3);

endmodule //compensator
